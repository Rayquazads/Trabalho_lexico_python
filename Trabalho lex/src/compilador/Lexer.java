// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: spec.flex

package compilador;
import static compilador.Token.*;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\12\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\0\15\31\1\32\14\31"+
    "\1\33\1\0\1\34\1\35\1\36\1\0\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\31"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\31\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\31"+
    "\1\66\1\67\1\70\1\71\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\30\1\31\1\32\21\26\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\1\40\1\0\1\41\1\0\1\42"+
    "\1\43\1\44\1\0\7\26\1\45\6\26\1\45\15\26"+
    "\1\40\2\0\1\46\1\45\17\26\2\0\7\26\2\0"+
    "\1\26\1\45\1\26\2\47\1\26\2\47\1\45\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\72\0\72"+
    "\0\u015c\0\72\0\72\0\u0196\0\72\0\72\0\72\0\72"+
    "\0\72\0\u01d0\0\72\0\72\0\u020a\0\u0244\0\u027e\0\u02b8"+
    "\0\u02f2\0\72\0\72\0\72\0\72\0\u032c\0\u0366\0\u03a0"+
    "\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570"+
    "\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\72\0\72"+
    "\0\72\0\72\0\72\0\u0706\0\u0740\0\u077a\0\72\0\u07b4"+
    "\0\72\0\72\0\72\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u02b8\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\72\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2"+
    "\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512"+
    "\0\u0984\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\72"+
    "\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\30\1\44\1\30\1\45"+
    "\1\30\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\30\1\57\1\60\1\61\1\62\73\0"+
    "\2\3\1\0\1\3\2\0\1\6\111\0\1\63\42\0"+
    "\6\64\1\65\63\64\2\6\2\0\66\6\12\0\1\66"+
    "\74\0\1\67\75\0\1\70\1\0\1\22\75\0\1\71"+
    "\71\0\1\72\71\0\1\73\63\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\30\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\16\30\1\75\11\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\17\30\1\76\10\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\16\30"+
    "\1\77\1\30\1\100\7\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\1\30\1\101\11\30\1\102\14\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\5\30"+
    "\1\103\10\30\1\104\11\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\13\30\1\105\12\30\1\106\1\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\1\30"+
    "\1\107\11\30\1\110\2\30\1\111\11\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\6\30\1\104\5\30"+
    "\1\112\1\113\3\30\1\104\6\30\25\0\1\74\1\0"+
    "\1\30\5\0\2\30\3\0\5\30\1\114\10\30\1\115"+
    "\11\30\25\0\1\74\1\0\1\30\5\0\2\30\3\0"+
    "\16\30\1\116\11\30\25\0\1\74\1\0\1\30\5\0"+
    "\2\30\3\0\17\30\1\75\10\30\25\0\1\74\1\0"+
    "\1\30\5\0\2\30\3\0\1\30\1\117\16\30\1\120"+
    "\7\30\25\0\1\74\1\0\1\30\5\0\2\30\3\0"+
    "\1\30\1\121\3\30\1\122\22\30\25\0\1\74\1\0"+
    "\1\30\5\0\2\30\3\0\22\30\1\123\1\124\1\30"+
    "\1\125\2\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\20\30\1\126\7\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\20\30\1\127\7\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\1\30\1\111\26\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\10\30"+
    "\1\130\17\30\4\0\6\64\1\131\63\64\6\0\1\132"+
    "\75\0\1\133\100\0\1\70\1\0\1\134\77\0\2\135"+
    "\4\0\27\135\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\15\30\1\136\12\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\17\30\1\137\10\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\16\30\1\127\11\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\5\30"+
    "\1\140\22\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\21\30\1\136\6\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\1\30\1\117\26\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\6\30\1\104\21\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\11\30"+
    "\1\103\7\30\1\136\6\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\3\30\1\141\24\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\13\30\1\101\14\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\16\30"+
    "\1\142\11\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\20\30\1\104\7\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\17\30\1\143\10\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\17\30\1\144\2\30"+
    "\1\104\5\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\15\30\1\104\12\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\15\30\1\145\12\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\22\30\1\104\5\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\21\30"+
    "\1\146\6\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\11\30\1\147\16\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\15\30\1\150\12\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\22\30\1\151\5\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\20\30"+
    "\1\152\7\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\14\30\1\104\13\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\11\30\1\153\16\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\23\30\1\136\3\30"+
    "\1\104\25\0\1\74\1\0\1\30\5\0\2\30\3\0"+
    "\13\30\1\104\14\30\25\0\1\74\1\0\1\30\5\0"+
    "\2\30\3\0\11\30\1\154\16\30\4\0\6\132\1\155"+
    "\63\132\12\133\1\156\57\133\23\0\1\134\71\0\1\135"+
    "\5\0\2\135\3\0\30\135\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\5\30\1\104\22\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\5\30\1\157\22\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\1\30"+
    "\1\160\26\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\5\30\1\161\22\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\1\30\1\116\26\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\16\30\1\162\11\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\23\30"+
    "\1\116\4\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\7\30\1\104\20\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\21\30\1\104\6\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\15\30\1\163\12\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\7\30"+
    "\1\136\20\30\25\0\1\74\1\0\1\30\5\0\2\30"+
    "\3\0\23\30\1\164\4\30\25\0\1\74\1\0\1\30"+
    "\5\0\2\30\3\0\11\30\1\115\16\30\25\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\22\30\1\165\5\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\13\30"+
    "\1\136\14\30\4\0\6\132\1\166\63\132\12\133\1\167"+
    "\57\133\21\0\1\74\1\0\1\30\5\0\2\30\3\0"+
    "\15\30\1\170\12\30\25\0\1\74\1\0\1\30\5\0"+
    "\2\30\3\0\12\30\1\104\15\30\25\0\1\74\1\0"+
    "\1\30\5\0\2\30\3\0\17\30\1\116\10\30\25\0"+
    "\1\74\1\0\1\30\5\0\2\30\3\0\20\30\1\116"+
    "\7\30\25\0\1\74\1\0\1\30\5\0\2\30\3\0"+
    "\22\30\1\171\5\30\25\0\1\74\1\0\1\30\5\0"+
    "\2\30\3\0\20\30\1\114\7\30\25\0\1\74\1\0"+
    "\1\30\5\0\2\30\3\0\3\30\1\172\24\30\4\0"+
    "\6\132\1\173\63\132\12\133\1\174\57\133\21\0\1\74"+
    "\1\0\1\30\5\0\2\30\3\0\4\30\1\175\23\30"+
    "\25\0\1\74\1\0\1\30\5\0\2\30\3\0\10\30"+
    "\1\104\17\30\12\0\1\176\75\0\1\177\63\0\1\200"+
    "\14\0\1\74\1\0\1\30\5\0\2\30\3\0\30\30"+
    "\12\0\1\201\75\0\1\201\57\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5800];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\1\1\2\11\1\1\5\11"+
    "\1\1\2\11\5\1\4\11\21\1\5\11\1\0\1\1"+
    "\1\0\1\11\1\0\3\11\1\0\34\1\1\11\2\0"+
    "\21\1\2\0\7\1\2\0\10\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private void imprimir(String token, String lexema){
        System.out.println(lexema + " ===>> " + token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { imprimir ("<<CARACTERE INVÁLIDO>>  ",yytext()); return ERROR;
            }
          // fall through
          case 40: break;
          case 2:
            { return BRANCO;
            }
          // fall through
          case 41: break;
          case 3:
            { imprimir ("aspas",yytext()); return ASPAS;
            }
          // fall through
          case 42: break;
          case 4:
            { imprimir ("COMENTARIO(LINHA)",yytext()); return COMENTARIO;
            }
          // fall through
          case 43: break;
          case 5:
            { imprimir ("porcentagem", yytext()); return PORCENTAGEM;
            }
          // fall through
          case 44: break;
          case 6:
            { imprimir ("comercial", yytext()); return COMERCIAL;
            }
          // fall through
          case 45: break;
          case 7:
            { imprimir ("aspasSimples",yytext()); return ASPASSIMPLES;
            }
          // fall through
          case 46: break;
          case 8:
            { imprimir ("lparent", yytext()); return LPARENT;
            }
          // fall through
          case 47: break;
          case 9:
            { imprimir ("rparent", yytext()); return RPARENT;
            }
          // fall through
          case 48: break;
          case 10:
            { imprimir ("mult", yytext()); return MULT;
            }
          // fall through
          case 49: break;
          case 11:
            { imprimir ("soma", yytext()); return SOMA;
            }
          // fall through
          case 50: break;
          case 12:
            { imprimir ("virg", yytext()); return VIRG;
            }
          // fall through
          case 51: break;
          case 13:
            { imprimir ("sub", yytext()); return SUB;
            }
          // fall through
          case 52: break;
          case 14:
            { imprimir ("dot", yytext()); return DOT;
            }
          // fall through
          case 53: break;
          case 15:
            { imprimir ("div", yytext()); return DIV;
            }
          // fall through
          case 54: break;
          case 16:
            { imprimir ("NUMERO INTEIRO",yytext()); return INT;
            }
          // fall through
          case 55: break;
          case 17:
            { imprimir ("ponto duplo", yytext()); return COLON;
            }
          // fall through
          case 56: break;
          case 18:
            { imprimir ("Terminador", yytext()); return TERMINADOR;
            }
          // fall through
          case 57: break;
          case 19:
            { imprimir ("menor", yytext()); return MENOR;
            }
          // fall through
          case 58: break;
          case 20:
            { imprimir ("igual", yytext()); return IGUAL;
            }
          // fall through
          case 59: break;
          case 21:
            { imprimir ("maior", yytext()); return MAIOR;
            }
          // fall through
          case 60: break;
          case 22:
            { imprimir ("NOME_VARIAVEL",yytext()); return NOME_VARIAVEL;
            }
          // fall through
          case 61: break;
          case 23:
            { imprimir ("lcol", yytext()); return LCOL;
            }
          // fall through
          case 62: break;
          case 24:
            { imprimir ("rcol", yytext()); return RCOL;
            }
          // fall through
          case 63: break;
          case 25:
            { imprimir ("circunflexo", yytext()); return CIRCUNFLEXO;
            }
          // fall through
          case 64: break;
          case 26:
            { imprimir ("underline", yytext()); return UNDERLINE;
            }
          // fall through
          case 65: break;
          case 27:
            { imprimir ("lbrace", yytext()); return LBRACE;
            }
          // fall through
          case 66: break;
          case 28:
            { imprimir ("ou", yytext()); return OU;
            }
          // fall through
          case 67: break;
          case 29:
            { imprimir ("rbrace", yytext()); return RBRACE;
            }
          // fall through
          case 68: break;
          case 30:
            { imprimir ("til", yytext()); return TIL;
            }
          // fall through
          case 69: break;
          case 31:
            { imprimir ("notequal", yytext()); return NOTEQUAL;
            }
          // fall through
          case 70: break;
          case 32:
            { imprimir ("string", yytext()); return STEXTO;
            }
          // fall through
          case 71: break;
          case 33:
            { imprimir ("doublestar", yytext()); return DOUBLESTAR;
            }
          // fall through
          case 72: break;
          case 34:
            { imprimir ("menor que", yytext()); return MENORQUE;
            }
          // fall through
          case 73: break;
          case 35:
            { imprimir ("igualdade", yytext()); return IGUALDADE;
            }
          // fall through
          case 74: break;
          case 36:
            { imprimir ("maior que", yytext()); return MAIORQUE;
            }
          // fall through
          case 75: break;
          case 37:
            { imprimir ("PALAVRA-CHAVE",yytext()); return PALAVRA_CHAVE;
            }
          // fall through
          case 76: break;
          case 38:
            { imprimir ("NUMERO DECIMAL",yytext()); return DEC;
            }
          // fall through
          case 77: break;
          case 39:
            { imprimir ("COMENTARIO(BLOCO)",yytext()); return COMENTARIO;
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
